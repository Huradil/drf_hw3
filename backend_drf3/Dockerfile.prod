###########
# BUILDER #
###########

# pull official base image
FROM python:3.11-alpine3.18 as builder

# set work directory
WORKDIR /usr/src/backend_drf3

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install psycopg2 dependencies
RUN apk update
RUN apk add gcc
RUN apk add python3-dev
RUN apk add postgresql-dev
RUN apk add musl-dev

# lint
RUN pip install --upgrade pip
COPY . .

# install dependencies
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/backend_drf3/wheels -r requirements.txt


#########
# FINAL #
#########

# pull official base image
FROM python:3.11-alpine3.18

# create directory for the app user
RUN mkdir -p /home/backend_drf3

# create the app user
RUN addgroup -S backend_drf3 && adduser -S backend_drf3 -G backend_drf3

# create the appropriate directories
ENV HOME=/home/backend_drf3
ENV APP_HOME=/home/backend_drf3/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/static
RUN mkdir $APP_HOME/media
WORKDIR $APP_HOME

# install dependencies
RUN apk update
RUN apk add gcc
RUN apk add python3-dev
RUN apk add postgresql-dev
RUN apk add musl-dev
RUN apk add libpq
COPY --from=builder /usr/src/backend_drf3/wheels /wheels
COPY --from=builder /usr/src/backend_drf3/requirements.txt .
RUN pip install --no-cache /wheels/*

# copy entrypoint.prod.sh
COPY ./entrypoint.prod.sh .
RUN sed -i 's/\r$//g'  $APP_HOME/entrypoint.prod.sh
RUN chmod +x  $APP_HOME/entrypoint.prod.sh

# copy project
COPY . $APP_HOME

# chown all the files to the backend user
RUN chown -R backend_drf3:backend_drf3 $APP_HOME

# change to the backend_drf3 user
USER backend_drf3

# run entrypoint.prod.sh
ENTRYPOINT ["/home/backend_drf3/web/entrypoint.prod.sh"]